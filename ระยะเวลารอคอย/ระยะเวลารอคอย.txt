SELECT *
FROM (

  -- Morning
  (SELECT 'Morning' as opd_type, substring(q1.visit_begin,1,10) as vstdate,
    TO_CHAR(make_interval(secs => AVG(EXTRACT(EPOCH FROM (
        TO_TIMESTAMP(q1.opd_begin, 'YYYY-MM-DD HH24:MI:SS') - 
        TO_TIMESTAMP(q1.visit_begin, 'YYYY-MM-DD HH24:MI:SS')
    )))), 'MI:SS') AS visit_screen,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.opd_begin IS NOT NULL AND q1.opd_end IS NOT NULL AND q1.opd_end > q1.opd_begin THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.opd_end, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.opd_begin, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS avg_screen,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.opd_end IS NOT NULL AND q1.doc_begin IS NOT NULL AND q1.doc_begin > q1.opd_end THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.doc_begin, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.opd_end, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS screen_doctor,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.doc_begin IS NOT NULL AND q1.doc_end IS NOT NULL AND q1.doc_end > q1.doc_begin THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.doc_end, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.doc_begin, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS avg_doctor,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.doc_end IS NOT NULL AND q1.pharm_begin IS NOT NULL AND q1.pharm_begin > q1.doc_end THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.pharm_begin, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.doc_end, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS doctor_pharma,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.pharm_begin IS NOT NULL AND q1.pharm_end IS NOT NULL AND q1.pharm_end > q1.pharm_begin THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.pharm_end, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.visit_begin, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS avg_visit_pharma
  FROM (
    SELECT DISTINCT
      t_visit.visit_vn as vn,
      t_visit.visit_hn as hn,
      t_visit.visit_begin_visit_time as visit_begin,
      t_visit.visit_financial_discharge_time as visit_end,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2060761082126' THEN t_visit_service.visit_service_treatment_date_time END) as opd_begin,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2060761082126' THEN t_visit_service.visit_service_finish_date_time END) as opd_end,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068315875716' THEN t_visit_service.visit_service_treatment_date_time END) as doc_begin,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068315875716' THEN t_visit_service.visit_service_finish_date_time END) as doc_end,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068197173050' THEN t_visit_service.visit_service_treatment_date_time END) as pharm_begin,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068197173050' THEN t_visit_service.visit_service_finish_date_time END) as pharm_end
    FROM t_visit
    LEFT JOIN t_patient on t_visit.t_patient_id = t_patient.t_patient_id
    LEFT JOIN t_visit_service on t_visit.t_visit_id = t_visit_service.t_visit_id
    LEFT JOIN b_service_point on t_visit_service.b_service_point_id = b_service_point.b_service_point_id
    LEFT JOIN t_visit_queue_map on t_visit.t_visit_id = t_visit_queue_map.t_visit_id
    WHERE t_visit.f_visit_status_id <> '4'
      AND t_visit.f_visit_type_id = '0'
      AND substring(t_visit.visit_begin_visit_time,1,10) BETWEEN '2568-04-01' AND '2568-04-01'
      AND CAST(substring(t_visit.visit_begin_visit_time, 12, 8) AS TIME) BETWEEN '08:30:00' AND '12:00:00'
      AND t_visit_queue_map.b_visit_queue_setup_id = '3217538747849'
      AND NOT EXISTS (
        SELECT 1 FROM t_patient_appointment pa WHERE pa.t_visit_id = t_visit.t_visit_id
      )
      AND NOT EXISTS (
        SELECT 1 FROM b_dayoff df WHERE t_visit.visit_begin_visit_time::DATE = (df.dayoff_date + INTERVAL '543 years')
      )
    GROUP BY vn, hn, t_visit.visit_begin_visit_time, t_visit.visit_financial_discharge_time
  ) as q1
  WHERE opd_begin <> ''
  GROUP BY vstdate)

  UNION

  -- Afternoon
  (SELECT 'Afternoon' as opd_type, substring(q1.visit_begin,1,10) as vstdate,
    TO_CHAR(make_interval(secs => AVG(EXTRACT(EPOCH FROM (
        TO_TIMESTAMP(q1.opd_begin, 'YYYY-MM-DD HH24:MI:SS') - 
        TO_TIMESTAMP(q1.visit_begin, 'YYYY-MM-DD HH24:MI:SS')
    )))), 'MI:SS') AS visit_screen,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.opd_begin IS NOT NULL AND q1.opd_end IS NOT NULL AND q1.opd_end > q1.opd_begin THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.opd_end, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.opd_begin, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS avg_screen,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.opd_end IS NOT NULL AND q1.doc_begin IS NOT NULL AND q1.doc_begin > q1.opd_end THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.doc_begin, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.opd_end, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS screen_doctor,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.doc_begin IS NOT NULL AND q1.doc_end IS NOT NULL AND q1.doc_end > q1.doc_begin THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.doc_end, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.doc_begin, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS avg_doctor,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.doc_end IS NOT NULL AND q1.pharm_begin IS NOT NULL AND q1.pharm_begin > q1.doc_end THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.pharm_begin, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.doc_end, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS doctor_pharma,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.pharm_begin IS NOT NULL AND q1.pharm_end IS NOT NULL AND q1.pharm_end > q1.pharm_begin THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.pharm_end, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.visit_begin, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS avg_visit_pharma
  FROM (
    SELECT DISTINCT
      t_visit.visit_vn as vn,
      t_visit.visit_hn as hn,
      t_visit.visit_begin_visit_time as visit_begin,
      t_visit.visit_financial_discharge_time as visit_end,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2060761082126' THEN t_visit_service.visit_service_treatment_date_time END) as opd_begin,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2060761082126' THEN t_visit_service.visit_service_finish_date_time END) as opd_end,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068315875716' THEN t_visit_service.visit_service_treatment_date_time END) as doc_begin,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068315875716' THEN t_visit_service.visit_service_finish_date_time END) as doc_end,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068197173050' THEN t_visit_service.visit_service_treatment_date_time END) as pharm_begin,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068197173050' THEN t_visit_service.visit_service_finish_date_time END) as pharm_end
    FROM t_visit
    LEFT JOIN t_patient on t_visit.t_patient_id = t_patient.t_patient_id
    LEFT JOIN t_visit_service on t_visit.t_visit_id = t_visit_service.t_visit_id
    LEFT JOIN b_service_point on t_visit_service.b_service_point_id = b_service_point.b_service_point_id
    LEFT JOIN t_visit_queue_map on t_visit.t_visit_id = t_visit_queue_map.t_visit_id
    WHERE t_visit.f_visit_status_id <> '4'
      AND t_visit.f_visit_type_id = '0'
      AND substring(t_visit.visit_begin_visit_time,1,10) BETWEEN '2568-04-01' AND '2568-04-01'
      AND CAST(substring(t_visit.visit_begin_visit_time, 12, 8) AS TIME) BETWEEN '13:00:00' AND '16:30:00'
      AND t_visit_queue_map.b_visit_queue_setup_id = '3217538747849'
      AND NOT EXISTS (
        SELECT 1 FROM t_patient_appointment pa WHERE pa.t_visit_id = t_visit.t_visit_id
      )
      AND NOT EXISTS (
        SELECT 1 FROM b_dayoff df WHERE t_visit.visit_begin_visit_time::DATE = (df.dayoff_date + INTERVAL '543 years')
      )
    GROUP BY vn, hn, t_visit.visit_begin_visit_time, t_visit.visit_financial_discharge_time
  ) as q1
  WHERE opd_begin <> ''
  GROUP BY vstdate)

  UNION

  -- AllDay
  (SELECT 'AllDay' as opd_type, substring(q1.visit_begin,1,10) as vstdate,
    TO_CHAR(make_interval(secs => AVG(EXTRACT(EPOCH FROM (
        TO_TIMESTAMP(q1.opd_begin, 'YYYY-MM-DD HH24:MI:SS') - 
        TO_TIMESTAMP(q1.visit_begin, 'YYYY-MM-DD HH24:MI:SS')
    )))), 'MI:SS') AS visit_screen,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.opd_begin IS NOT NULL AND q1.opd_end IS NOT NULL AND q1.opd_end > q1.opd_begin THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.opd_end, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.opd_begin, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS avg_screen,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.opd_end IS NOT NULL AND q1.doc_begin IS NOT NULL AND q1.doc_begin > q1.opd_end THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.doc_begin, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.opd_end, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS screen_doctor,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.doc_begin IS NOT NULL AND q1.doc_end IS NOT NULL AND q1.doc_end > q1.doc_begin THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.doc_end, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.doc_begin, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS avg_doctor,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.doc_end IS NOT NULL AND q1.pharm_begin IS NOT NULL AND q1.pharm_begin > q1.doc_end THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.pharm_begin, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.doc_end, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS doctor_pharma,

    TO_CHAR(make_interval(secs => AVG(CASE WHEN q1.pharm_begin IS NOT NULL AND q1.pharm_end IS NOT NULL AND q1.pharm_end > q1.pharm_begin THEN
      EXTRACT(EPOCH FROM (TO_TIMESTAMP(q1.pharm_end, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(q1.visit_begin, 'YYYY-MM-DD HH24:MI:SS')))
    ELSE 0 END)), 'MI:SS') AS avg_visit_pharma
  FROM (
    SELECT DISTINCT
      t_visit.visit_vn as vn,
      t_visit.visit_hn as hn,
      t_visit.visit_begin_visit_time as visit_begin,
      t_visit.visit_financial_discharge_time as visit_end,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2060761082126' THEN t_visit_service.visit_service_treatment_date_time END) as opd_begin,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2060761082126' THEN t_visit_service.visit_service_finish_date_time END) as opd_end,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068315875716' THEN t_visit_service.visit_service_treatment_date_time END) as doc_begin,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068315875716' THEN t_visit_service.visit_service_finish_date_time END) as doc_end,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068197173050' THEN t_visit_service.visit_service_treatment_date_time END) as pharm_begin,
      MIN(CASE WHEN b_service_point.b_service_point_id = '2068197173050' THEN t_visit_service.visit_service_finish_date_time END) as pharm_end
    FROM t_visit
    LEFT JOIN t_patient on t_visit.t_patient_id = t_patient.t_patient_id
    LEFT JOIN t_visit_service on t_visit.t_visit_id = t_visit_service.t_visit_id
    LEFT JOIN b_service_point on t_visit_service.b_service_point_id = b_service_point.b_service_point_id
    LEFT JOIN t_visit_queue_map on t_visit.t_visit_id = t_visit_queue_map.t_visit_id
    WHERE t_visit.f_visit_status_id <> '4'
      AND t_visit.f_visit_type_id = '0'
      AND substring(t_visit.visit_begin_visit_time,1,10) BETWEEN '2568-04-01' AND '2568-04-01'
      AND CAST(substring(t_visit.visit_begin_visit_time, 12, 8) AS TIME) BETWEEN '08:30:00' AND '16:30:00'
      AND t_visit_queue_map.b_visit_queue_setup_id = '3217538747849'
      AND NOT EXISTS (
        SELECT 1 FROM t_patient_appointment pa WHERE pa.t_visit_id = t_visit.t_visit_id
      )
      AND NOT EXISTS (
        SELECT 1 FROM b_dayoff df WHERE t_visit.visit_begin_visit_time::DATE = (df.dayoff_date + INTERVAL '543 years')
      )
    GROUP BY vn, hn, t_visit.visit_begin_visit_time, t_visit.visit_financial_discharge_time
  ) as q1
  WHERE opd_begin <> ''
  GROUP BY vstdate)

) AS combined_result

ORDER BY 
  vstdate,
  CASE opd_type
    WHEN 'Morning' THEN 1
    WHEN 'Afternoon' THEN 2
    WHEN 'AllDay' THEN 3
    ELSE 4
  END;